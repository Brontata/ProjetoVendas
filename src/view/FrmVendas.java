package view;

import static com.sun.java.accessibility.util.AWTEventMonitor.addWindowListener;
import dao.DaoCliente;
import dao.DaoItemVenda;
import dao.DaoVenda;
import java.awt.Component;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import javax.swing.text.NumberFormatter;

/**
 *
 * @author ManutencaoEtec
 */
public class FrmVendas extends javax.swing.JInternalFrame {

    ArrayList<DaoCliente> cli;
    ArrayList<DaoItemVenda> it;
    NumberFormatter nfPreco;
    MaskFormatter mfData;

    boolean alterar = false;
    boolean incluir = false;
    boolean alterarItem = false;
    boolean IncluirItem = false;
    boolean encerrado = false;

    static boolean visible = false;

    public static boolean getVis() {
        return visible;
    }

    public void setVis(boolean v) {
        visible = v;
    }

    /**
     * Creates new form FrmVendas
     */
    public FrmVendas() throws ParseException, SQLException, ClassNotFoundException {
        initComponents();
        DecimalFormat df = new DecimalFormat("R$ #,###,##0.00;-R$ #,###,##0.00");
        nfPreco = new NumberFormatter(df);
        nfPreco.setValueClass(Double.class);
        try {
            DaoCliente cliente = new DaoCliente();
            cli = new ArrayList<DaoCliente>();
            cli.addAll(cliente.pesquisar(cliente));
            for (DaoCliente daoCli : cli) {
                cmbCliente.addItem(daoCli.getCodCli());
            }
            cmbCliente.setSelectedIndex(0);
            it = new ArrayList<DaoItemVenda>();
            mfData = new MaskFormatter("##/##/####");
            mfData.setPlaceholderCharacter('_');
            mfData.setValueContainsLiteralCharacters(true);
            mfData.setValueClass(String.class);
            DefaultFormatterFactory dffData = new DefaultFormatterFactory(mfData);
            txtDataVenda.setFormatterFactory(dffData);
            txtDataEntrega.setFormatterFactory(dffData);

        } catch (ParseException e) {
            throw new ParseException("Ocorreu um erro no Formulário de vendas: \n" + e.getMessage(), 0);
        } catch (SQLException e) {
            throw new SQLException("Ocorreu um erro no Formulário de Vendas: \n" + e.getMessage());
        } catch (ClassNotFoundException e) {
            throw new ClassNotFoundException("Ocorreu um erro no Formulário de vendas: \n" + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        pnlVendas = new javax.swing.JPanel();
        btnIncluir = new javax.swing.JButton();
        pnlCamposVenda = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtNumVenda = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDataVenda = new javax.swing.JFormattedTextField();
        scpObs = new javax.swing.JScrollPane();
        txtObs = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbCliente = new javax.swing.JComboBox();
        txtNome = new javax.swing.JTextField();
        txtDataEntrega = new javax.swing.JFormattedTextField();
        btnAlterar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnPesquisar = new javax.swing.JButton();
        btnGravar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        scpVendas = new javax.swing.JScrollPane();
        tblVendas = new javax.swing.JTable();
        pnlItens = new javax.swing.JPanel();
        btnIncluirItem = new javax.swing.JButton();
        btnAlterarItem = new javax.swing.JButton();
        btnExcluirItem = new javax.swing.JButton();
        btnPesquisarItem = new javax.swing.JButton();
        btnEncerrar = new javax.swing.JButton();
        scpItens = new javax.swing.JScrollPane();
        tblItens = new javax.swing.JTable();
        pnlTotal = new javax.swing.JPanel();
        txtTotalVenda = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Controle de Vendas");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel7.setText("Vendas");

        jLabel8.setText("Detalhes");

        pnlVendas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnIncluir.setText("Incluir");
        btnIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIncluirActionPerformed(evt);
            }
        });

        jLabel2.setText("Núm. Venda:");

        txtNumVenda.setEnabled(false);

        jLabel3.setText("Data Venda:");

        jLabel4.setText("Obs.:");

        txtDataVenda.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        txtDataVenda.setEnabled(false);
        txtDataVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataVendaActionPerformed(evt);
            }
        });

        txtObs.setColumns(20);
        txtObs.setRows(5);
        txtObs.setEnabled(false);
        scpObs.setViewportView(txtObs);

        jLabel5.setText("Cliente:");

        jLabel6.setText("Data Entrega:");

        cmbCliente.setMaximumRowCount(1000);
        cmbCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbClienteActionPerformed(evt);
            }
        });

        txtNome.setEnabled(false);
        txtNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeActionPerformed(evt);
            }
        });

        txtDataEntrega.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        txtDataEntrega.setEnabled(false);

        javax.swing.GroupLayout pnlCamposVendaLayout = new javax.swing.GroupLayout(pnlCamposVenda);
        pnlCamposVenda.setLayout(pnlCamposVendaLayout);
        pnlCamposVendaLayout.setHorizontalGroup(
            pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCamposVendaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCamposVendaLayout.createSequentialGroup()
                        .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlCamposVendaLayout.createSequentialGroup()
                                .addComponent(txtDataVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDataEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlCamposVendaLayout.createSequentialGroup()
                                        .addComponent(cmbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(scpObs)))
                    .addGroup(pnlCamposVendaLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNumVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(94, Short.MAX_VALUE))
        );
        pnlCamposVendaLayout.setVerticalGroup(
            pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCamposVendaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNumVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(cmbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDataVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtDataEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(scpObs, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnAlterar.setText("Alterar");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        btnGravar.setText("Gravar");
        btnGravar.setEnabled(false);
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.setEnabled(false);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        tblVendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Venda", "Cliente", "Nome", "Data da Venda", "Entrega em", "Obs"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblVendas.getTableHeader().setResizingAllowed(false);
        tblVendas.getTableHeader().setReorderingAllowed(false);
        tblVendas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblVendasMouseClicked(evt);
            }
        });
        scpVendas.setViewportView(tblVendas);

        javax.swing.GroupLayout pnlVendasLayout = new javax.swing.GroupLayout(pnlVendas);
        pnlVendas.setLayout(pnlVendasLayout);
        pnlVendasLayout.setHorizontalGroup(
            pnlVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlVendasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scpVendas)
                    .addGroup(pnlVendasLayout.createSequentialGroup()
                        .addComponent(pnlCamposVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 46, Short.MAX_VALUE))
                    .addGroup(pnlVendasLayout.createSequentialGroup()
                        .addComponent(btnIncluir)
                        .addGap(53, 53, 53)
                        .addComponent(btnAlterar)
                        .addGap(53, 53, 53)
                        .addComponent(btnExcluir)
                        .addGap(53, 53, 53)
                        .addComponent(btnPesquisar)
                        .addGap(53, 53, 53)
                        .addComponent(btnGravar)
                        .addGap(53, 53, 53)
                        .addComponent(btnCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSair)))
                .addContainerGap())
        );
        pnlVendasLayout.setVerticalGroup(
            pnlVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlVendasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlVendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIncluir)
                    .addComponent(btnAlterar)
                    .addComponent(btnExcluir)
                    .addComponent(btnPesquisar)
                    .addComponent(btnGravar)
                    .addComponent(btnCancelar)
                    .addComponent(btnSair))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlCamposVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlItens.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnIncluirItem.setText("Incluir");
        btnIncluirItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIncluirItemActionPerformed(evt);
            }
        });

        btnAlterarItem.setText("Alterar");
        btnAlterarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarItemActionPerformed(evt);
            }
        });

        btnExcluirItem.setText("Excluir");
        btnExcluirItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirItemActionPerformed(evt);
            }
        });

        btnPesquisarItem.setText("Pesquisar");
        btnPesquisarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarItemActionPerformed(evt);
            }
        });

        btnEncerrar.setText("Encerrar");
        btnEncerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncerrarActionPerformed(evt);
            }
        });

        tblItens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Descrição", "Quantidade", "Preço Unitário", "SubTotal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblItens.getTableHeader().setResizingAllowed(false);
        tblItens.getTableHeader().setReorderingAllowed(false);
        scpItens.setViewportView(tblItens);

        javax.swing.GroupLayout pnlItensLayout = new javax.swing.GroupLayout(pnlItens);
        pnlItens.setLayout(pnlItensLayout);
        pnlItensLayout.setHorizontalGroup(
            pnlItensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlItensLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlItensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scpItens)
                    .addGroup(pnlItensLayout.createSequentialGroup()
                        .addComponent(btnIncluirItem)
                        .addGap(42, 42, 42)
                        .addComponent(btnAlterarItem)
                        .addGap(42, 42, 42)
                        .addComponent(btnExcluirItem)
                        .addGap(42, 42, 42)
                        .addComponent(btnPesquisarItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEncerrar)))
                .addContainerGap())
        );
        pnlItensLayout.setVerticalGroup(
            pnlItensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlItensLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlItensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIncluirItem)
                    .addComponent(btnAlterarItem)
                    .addComponent(btnExcluirItem)
                    .addComponent(btnPesquisarItem)
                    .addComponent(btnEncerrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scpItens, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlTotal.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtTotalVenda.setEditable(false);
        txtTotalVenda.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        txtTotalVenda.setForeground(new java.awt.Color(153, 51, 0));
        txtTotalVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalVendaActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel9.setText("Total Venda:");

        javax.swing.GroupLayout pnlTotalLayout = new javax.swing.GroupLayout(pnlTotal);
        pnlTotal.setLayout(pnlTotalLayout);
        pnlTotalLayout.setHorizontalGroup(
            pnlTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTotalLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtTotalVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlTotalLayout.setVerticalGroup(
            pnlTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTotalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotalVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlVendas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(pnlItens, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlVendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlItens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnlTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblVendasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblVendasMouseClicked
        // TODO add your handling code here:
        if (tblVendas.getRowCount() >= 0) {
            DaoItemVenda item = new DaoItemVenda();
            item.setNumVenda((Integer) tblVendas.getValueAt(tblVendas.getSelectedRow(), 0));
            item.setCodPro(0);
            try {
                txtTotalVenda.setText("R$ 0,00");
                atualizaTableItens(item.pesquisar(item));
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erro no Banco de dados:\n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erro no driver de conexão:\n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "ocorreu um erro: " + e.getMessage(), "erro:", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_tblVendasMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        // TODO add your handling code here:
        formWindowClosing(null);
        setVis(false);
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIncluirActionPerformed
        // TODO add your handling code here:
        DaoCliente cliente = new DaoCliente();
        try {
            habilitaBotoes(false, pnlVendas);
            habilitaComponentes(false, pnlItens);
            habilitaComponentes(true, pnlCamposVenda);
            cmbClienteActionPerformed(null);
            txtObs.setEnabled(true);
            limpaCampos(pnlCamposVenda);
            txtObs.setText("");
            txtNome.setText(cli.get(cmbCliente.getSelectedIndex()).getNome());
            incluir = true;
            txtNumVenda.setEnabled(false);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro: " + e.getMessage(),
                    "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnIncluirActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        dispose();
    }//GEN-LAST:event_formWindowClosing

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
        DaoVenda venda = new DaoVenda();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        try {
            try {
                venda.setNumVenda(Integer.valueOf(txtNumVenda.getText()));
            } catch (Exception e) {
            }
            try {
                venda.setCodCli(Integer.valueOf(cmbCliente.getSelectedItem().toString()));
            } catch (Exception e) {
            }
            venda.setDataVenda(sdf.parse(txtDataVenda.getText()));
            venda.setDataEntrega(sdf.parse(txtDataEntrega.getText()));
            venda.setObs(txtObs.getText());
            if (incluir) {
                venda.incluir();
            }
            if (alterar) {
                venda.alterar();
            }
            btnCancelarActionPerformed(null);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocorreu um erro: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnGravarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        DaoVenda venda = new DaoVenda();
        DaoItemVenda item = new DaoItemVenda();
        venda.setNumVenda(0);
        try {
            if (venda.pesquisar(venda).isEmpty()) {
               limpaTable(tblVendas); 
            //JOptionPane.showMessageDialog(null, "Não há vendas cadastradas!", "Atenção:", JOptionPane.WARNING_MESSAGE);
            } else {
                atualizaTableVendas(venda.pesquisar(venda));
                tblVendas.addRowSelectionInterval(0, 0);
                item.setNumVenda((Integer) tblVendas.getValueAt(tblVendas.getSelectedRow(), 0));
                item.setCodPro((int) tblVendas.getValueAt(tblVendas.getSelectedRow(), 1));
                if (!item.pesquisar(item).isEmpty()) {
                    atualizaTableItens(item.pesquisar(item));

                }
            }
            habilitaComponentes(false, pnlCamposVenda);
            txtObs.setEnabled(false);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no Banco de dados:\n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no driver de conexão:\n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro: " + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

    }//GEN-LAST:event_formWindowOpened

    private void cmbClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbClienteActionPerformed
        // TODO add your handling code here:
        txtNome.setText(cli.get(cmbCliente.getSelectedIndex()).getNome());
    }//GEN-LAST:event_cmbClienteActionPerformed

    private void atualizaTableItens(ArrayList<DaoItemVenda> itens) {
        limpaTable(tblItens);
        double total = 0;
        if (!itens.isEmpty()) {

            DefaultTableModel dadosItens = (DefaultTableModel) tblItens.getModel();
            String Linha[] = new String[]{"", "", "", "", ""};
            try {
                int posicao = -1;
                for (DaoItemVenda item : itens) {
                    posicao++;
                    dadosItens.addRow(Linha);
                    dadosItens.setValueAt(item.getCodPro(), posicao, 0);
                    dadosItens.setValueAt(item.getDescricao(), posicao, 1);
                    dadosItens.setValueAt(item.getQuantidade(), posicao, 2);
                    dadosItens.setValueAt(nfPreco.valueToString(item.getPrecoUnit()), posicao, 3);
                    dadosItens.setValueAt(nfPreco.valueToString(item.getSubtotal()), posicao, 4);
                    total = total + item.getSubtotal();
                }
                txtTotalVenda.setText(nfPreco.valueToString(total));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erro: " + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            }
        } else {
        }
    }

    private void habilitaBotoes(boolean hab, JPanel panel) {
        for (Component jcomp : panel.getComponents()) {
            if (jcomp instanceof JButton) {
                jcomp.setEnabled(hab);
                if ((jcomp.getAccessibleContext().getAccessibleName().equals("Cancelar"))) {
                    jcomp.setEnabled(!hab);
                }
                if ((jcomp.getAccessibleContext().getAccessibleName().equals("Gravar"))) {
                    jcomp.setEnabled(!hab);
                }
            }
        }
    }

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        formWindowOpened(null);
        habilitaBotoes(true, pnlVendas);
        limpaCampos(pnlCamposVenda);
        txtObs.setText("");
        habilitaComponentes(false, pnlCamposVenda);
        habilitaComponentes(true, pnlItens);
        txtObs.setEnabled(false);
        incluir = false;
        alterar = false;
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        // TODO add your handling code here:
        DaoCliente cliente = new DaoCliente();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        try {
        habilitaBotoes(false, pnlVendas);
        habilitaComponentes(false, pnlItens);
        habilitaComponentes(true, pnlCamposVenda);
        cli.addAll(cliente.pesquisar(cliente));
        for (DaoCliente daoCli : cli) {
                cmbCliente.addItem(daoCli.getCodCli());
            }
            txtNumVenda.setEnabled(false);
            txtObs.setEnabled(true);
            if (tblVendas.getRowCount() > 0) {
                int posLinha = tblVendas.getSelectedRow();
                if (posLinha >= 0) {
                    txtNumVenda.setText(tblVendas.getValueAt(posLinha, 0).toString());
                    for (DaoCliente daoCli : cli) {
                        if (daoCli.getCodCli() == Integer.valueOf(tblVendas.getValueAt(posLinha, 1).toString())) {
                            cmbCliente.setSelectedIndex(cli.indexOf(daoCli));
                        }
                    }

                    txtNome.setText(tblVendas.getValueAt(posLinha, 1).toString());
                    //txtDataVenda.setValue(sdf.format(tblVendas.getValueAt(posLinha, 3)));
                    txtDataVenda.setValue(tblVendas.getValueAt(posLinha, 3).toString());
                    //txtDataEntrega.setValue(sdf.format(tblVendas.getValueAt(posLinha, 4)));
                    txtDataEntrega.setValue(tblVendas.getValueAt(posLinha, 4).toString());
                    txtObs.setText(tblVendas.getValueAt(posLinha,5).toString());
                } else {
                    JOptionPane.showMessageDialog(null, "Selecione uma venda para alterar!", "Erro:", JOptionPane.ERROR_MESSAGE);
                    btnCancelarActionPerformed(null);
                }
                
            } else {
                JOptionPane.showMessageDialog(null, "Não há vendas cadastrados ainda!", "Erro:", JOptionPane.ERROR_MESSAGE);
                btnCancelarActionPerformed(null);
            }
            txtDataVenda.requestFocus();
            alterar = true;
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no Banco de dados:\n", "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no driver de conexão:\n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro: " + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        // TODO add your handling code here:
        try {
            if (tblVendas.getSelectedRow() >= 0) {
                Object[] options = {"Sim", "Não"};
                if ((JOptionPane.showOptionDialog(this, "Deseja mesmo APAGAR a venda selecionada?", "Aviso:", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1])) == JOptionPane.YES_OPTION) {
                    DaoVenda dv = new DaoVenda();
                    DaoItemVenda di = new DaoItemVenda();
                    di.setNumVenda(Integer.valueOf(tblVendas.getValueAt(tblVendas.getSelectedRow(), 0).toString()));
                    dv.setNumVenda(Integer.valueOf(tblVendas.getValueAt(tblVendas.getSelectedRow(), 0).toString()));
                    di.excluir();
                    dv.excluir();
                    if (dv.excluir()) {
                        JOptionPane.showMessageDialog(null, "Venda excluida com sucesso!", "Exclusão:", JOptionPane.INFORMATION_MESSAGE);
                    }
                    formWindowOpened(null);
                }
            }
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no SQL ao excluir: \n" + ex.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        }
        
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro o excluir: " + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        // TODO add your handling code here:
        btnCancelar.setEnabled(true);
        DaoVenda dv = new DaoVenda();
        DaoItemVenda div = new DaoItemVenda();
        try {
            String numVendaTemp = JOptionPane.showInputDialog(this, "Informe o número da venda desejada: ", "Pesquisar", JOptionPane.QUESTION_MESSAGE);
            if (numVendaTemp != null) {
                dv.setNumVenda(Integer.valueOf(numVendaTemp));
                div.setNumVenda(dv.getNumVenda());

                if (dv.pesquisar(dv).isEmpty()) {
                    JOptionPane.showMessageDialog(null, "A venda não foi encontrada", "Erro:", JOptionPane.ERROR_MESSAGE);
                } else {
                    if (div.getNumVenda() < 1) {
                        dv.setNumVenda(0);
                        div.setNumVenda(dv.getNumVenda());
                    }
                    atualizaTableVendas(dv.pesquisar(dv));
                    tblVendas.setRowSelectionInterval(0, 0);
                    tblVendasMouseClicked(null);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no DB: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro de classe: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Operação Cancelada! \nOcorreu um erro no valor informado para o Número da venda: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void btnIncluirItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIncluirItemActionPerformed
        // TODO add your handling code here:
        try {
            DaoItemVenda item = new DaoItemVenda();
            if (item.pesquisar(item).isEmpty()) {
                item.setNumVenda((int) tblVendas.getValueAt(tblVendas.getSelectedRow(), 0));
                item = FrmItemVenda.showItemVenda(item);
                for (DaoItemVenda daoIt : it) {
                    if (daoIt.getCodPro() == item.getCodPro()) {
                        JOptionPane.showMessageDialog(null, "O PRODUTO já está cadastrado nessa venda!", "Erro:", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                if (item != null) {
                    it.add(item);
                    atualizaTableItens(it);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Não é possivel ADICIONAR itens nessa venda: \nA venda está ENCERRADA!", "Erro:", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no DB: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro de classe: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnIncluirItemActionPerformed

    private void btnAlterarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarItemActionPerformed
        // TODO add your handling code here:
        try {
            DaoItemVenda item = new DaoItemVenda();
            item.setNumVenda((int) tblVendas.getValueAt(tblVendas.getSelectedRow(), 0));
            if (item.pesquisar(item).isEmpty()) {
                if (tblItens.getSelectedRow() >= 0) {
                    if (item != null) {
                        item = FrmItemVenda.showItemVenda(item);
                        item.alterar();
                        it.set(tblItens.getSelectedRow(), item);
                        atualizaTableItens(it);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Selecione primeiro o item que deseja alterar!", "Erro:", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Não é possível ALTERAR itens nessa venda:\nA venda está ENCERRADA!", "Erro:", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no DB: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro de classe: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAlterarItemActionPerformed

    private void btnExcluirItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirItemActionPerformed
        // TODO add your handling code here:
        try {
            Object[] botoes = {" Sim ", " Não "};
            DaoItemVenda item = new DaoItemVenda();
            item.setNumVenda((int) tblVendas.getValueAt(tblVendas.getSelectedRow(), 0));
            if (item.pesquisar(item).isEmpty()) {
                if (tblItens.getSelectedRow() >= 0) {
                    item = it.get(tblItens.getSelectedRow());
                    if (JOptionPane.showOptionDialog(null, "Deseja mesmo APAGAR o item?", "Atenção:", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, botoes, botoes[1]) == JOptionPane.YES_OPTION) {
                        it.remove(item);
                        atualizaTableItens(it);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Selecione primeiro o item que deseja excluir!", "Erro:", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Não é possível EXCLUIR itens nessa venda:\nA venda está ENCERRADA!", "Erro:", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no DB: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro de classe: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnExcluirItemActionPerformed

    private void btnPesquisarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarItemActionPerformed
        // TODO add your handling code here:
        DaoVenda dv = new DaoVenda();
        DaoItemVenda div = new DaoItemVenda();
        try {
            String codProTemp;
            codProTemp = JOptionPane.showInputDialog(this, "Informe o código do produto desejado: \n (Zero para visualizar todos novamente)", "Pesquisa:", JOptionPane.QUESTION_MESSAGE);
            if (codProTemp != null) {
                div.setNumVenda((int)tblVendas.getValueAt(tblVendas.getSelectedRow(), 0));
                div.setCodPro(Integer.valueOf(codProTemp));
                div.pesquisar(div);
                
                if (div.pesquisar(div).isEmpty()) {
                    JOptionPane.showMessageDialog(null, "O produto não foi encontrado!", "Erro:", JOptionPane.ERROR_MESSAGE);
                } else {
                    atualizaTableItens(div.pesquisar(div));
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no DB: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro de classe: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Operação cancelada \nOcorreu um erro no valor informado para o Código do produto: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnPesquisarItemActionPerformed

    private void btnEncerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncerrarActionPerformed
        // TODO add your handling code here:
        if (!it.isEmpty()) {
            try {
                if (JOptionPane.showConfirmDialog(this, "Deseja mesmo ENCERRAR a venda!", "Atenção", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                    for (DaoItemVenda daoItem : it) {
                        daoItem.incluir();
                    }
                    it.clear();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erro no DB: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erro de classe: \n" + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnEncerrarActionPerformed

    private void txtTotalVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalVendaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalVendaActionPerformed

    private void txtNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeActionPerformed

    private void txtDataVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataVendaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataVendaActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        formWindowOpened(null);
    }//GEN-LAST:event_formInternalFrameOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmVendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmVendas().setVisible(true);
                } catch (ParseException ex) {
                    Logger.getLogger(FrmVendas.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(FrmVendas.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FrmVendas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private void limpaTable(JTable table) {
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        while (dtm.getRowCount() > 0) {
            dtm.removeRow(0);
        }
    }

    private void atualizaTableVendas(ArrayList<DaoVenda> vendas) {
        limpaTable(tblVendas);
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        if (vendas.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Não foram encontradas VENDAS no banco de dados.", "Atenção:", JOptionPane.INFORMATION_MESSAGE);
        } else {
            DefaultTableModel dadosVendas = (DefaultTableModel) tblVendas.getModel();
            String Linha[] = new String[]{"", "", "", "", "", ""};
            try {
                int posicao = -1;
                for (DaoVenda venda : vendas) {
                    posicao++;
                    dadosVendas.addRow(Linha);
                    dadosVendas.setValueAt(venda.getNumVenda(), posicao, 0);
                    dadosVendas.setValueAt(venda.getCodCli(), posicao, 1);
                    dadosVendas.setValueAt(venda.getNome(), posicao, 2);
                    dadosVendas.setValueAt(sdf.format(venda.getDataVenda()), posicao, 3);
                    dadosVendas.setValueAt(sdf.format(venda.getDataEntrega()), posicao, 4);
                    dadosVendas.setValueAt(venda.getObs(), posicao, 5);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erro: " + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void habilitaComponentes(boolean hab, JComponent container) {
        for (Component jcomp : container.getComponents()) {
            jcomp.setEnabled(hab);
        }
    }

    private void limpaCampos(JComponent container) {
        for (Component jcomp : container.getComponents()) {
            if (jcomp instanceof JTextField) {
                ((JTextField) jcomp).setText("");
            }
            if (jcomp instanceof JComboBox) {
                ((JComboBox) jcomp).setSelectedIndex(0);
            }
            if (jcomp instanceof JFormattedTextField) {
                ((JFormattedTextField) jcomp).setValue("");
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnAlterarItem;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEncerrar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnExcluirItem;
    private javax.swing.JButton btnGravar;
    private javax.swing.JButton btnIncluir;
    private javax.swing.JButton btnIncluirItem;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnPesquisarItem;
    private javax.swing.JButton btnSair;
    private javax.swing.JComboBox cmbCliente;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel pnlCamposVenda;
    private javax.swing.JPanel pnlItens;
    private javax.swing.JPanel pnlTotal;
    private javax.swing.JPanel pnlVendas;
    private javax.swing.JScrollPane scpItens;
    private javax.swing.JScrollPane scpObs;
    private javax.swing.JScrollPane scpVendas;
    private javax.swing.JTable tblItens;
    private javax.swing.JTable tblVendas;
    private javax.swing.JFormattedTextField txtDataEntrega;
    private javax.swing.JFormattedTextField txtDataVenda;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtNumVenda;
    private javax.swing.JTextArea txtObs;
    private javax.swing.JTextField txtTotalVenda;
    // End of variables declaration//GEN-END:variables
}
